<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记昨日书</title>
  
  <subtitle>忙碌把时光缩短, 苦难把岁月拉长</subtitle>
  <link href="https://xbmlz.github.io/atom.xml" rel="self"/>
  
  <link href="https://xbmlz.github.io/"/>
  <updated>2023-09-21T00:54:32.257Z</updated>
  <id>https://xbmlz.github.io/</id>
  
  <author>
    <name>xbmlz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>构建一个前端框架-响应式，组合式，零依赖</title>
    <link href="https://xbmlz.github.io/build-frontend-framework/"/>
    <id>https://xbmlz.github.io/build-frontend-framework/</id>
    <published>2023-09-20T18:10:46.000Z</published>
    <updated>2023-09-21T00:54:32.257Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://18alan.space/posts/how-hard-is-it-to-build-a-frontend-framework.html#how-hard-is-it-to-build-a-frontend-framework">https://18alan.space/posts/how-hard-is-it-to-build-a-frontend-framework.html#how-hard-is-it-to-build-a-frontend-framework</a></p></blockquote><p>在开始之前设定一些背景，所谓的前端框架是指一个能够让我们<strong>避免</strong>编写传统的HTML和JavaScript代码的框架，例如：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;cool-para&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> coolPara = <span class="string">&#x27;Lorem ipsum.&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;cool-para&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  el.<span class="property">innerText</span> = coolPara;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而是允许我们编写类似这样的神奇HTML和JavaScript代码 (<a href="https://vuejs.org/guide/scaling-up/sfc.html#introduction">Vue</a>):</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> coolPara = <span class="string">&#x27;Lorem ipsum.&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; coolPara &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者是(<a href="https://react.dev/learn/your-first-component#defining-a-component">React</a>):</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Para</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> coolPara = <span class="string">&#x27;Lorem ipsum&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123; coolPara &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一个框架的好处是可以理解的。记住像 <code>document</code>、<code>innerText</code> 和 <code>getElementById</code> 这样的单词或短语非常困难，因为它们音节太长了。</p><p>好吧，音节太长并不是主要原因。</p><blockquote><p>响应式✨</p></blockquote><p>第一个主要原因是，在第二和第三个示例中，我们只需要设置或者更新变量<code>coolPara</code>和标记的值，更新<code>&lt;p&gt;</code>元素时不需要显式的设置它的<code>innerText</code>。</p><p>这被称为<em><strong>响应式</strong></em>，UI与数据绑定在一起，只需要更改即可更新UI</p><blockquote><p>组合式✨</p></blockquote><p>第二个主要原因是可以定一个组件并重用它，而不必在每次需要时都重新定义它，这就是所谓的<em><strong>组合式</strong></em>。</p><p>默认情况下，普通的HTML+JavaScript没有这个属性。因此，下面的代码并没有做它认为应该做的事情：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Defining the component --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">&quot;cool-para&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">content</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Using the component --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cool-para</span>&gt;</span>Lorem ipsum.<span class="tag">&lt;/<span class="name">cool-para</span>&gt;</span></span><br></pre></td></tr></table></figure><p>响应式和组合式时Vue、React等常用的前端框架提供的两个主要特性。</p><p>这些抽象并不是没有代价的，人们必须预先在加载一些特定于框架的概念，当事情以令人费解的神奇方式工作时处理它们的漏洞，更不用说，还有一大堆容易失败的依赖关系。</p><p>但事实证明，使用现代Web API，实现这两个目标并不难。在大多数情况下，我们实际上可能并不需要传统的框架和它们复杂的混乱…</p><h2 id="响应式（Reactivity）"><a href="#响应式（Reactivity）" class="headerlink" title="响应式（Reactivity）"></a>响应式（Reactivity）</h2><p>一个简单的陈述来解释响应式就是<em><strong>当数据更新时，自动更新用户界面</strong></em>。</p><p>第一部分是了解<em><strong>数据何时更新</strong></em>，不幸的是，这不是一个普通的对象可以做到的事情。我们不能简单的调用一个<code>ondateupdate</code>的监听器来监听数据的变化。</p><p>幸运的是，JavaScript刚好有一个可以让我们做到这一点的工具，它叫做代理（<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy"><code>Proxy</code></a>）。</p><h3 id="代理对象（Proxy-Objects）"><a href="#代理对象（Proxy-Objects）" class="headerlink" title="代理对象（Proxy Objects）"></a>代理对象（Proxy Objects）</h3><p><code>Proxy</code>允许我们从一个<em><strong>普通对象</strong></em>创建一个<em><strong>代理对象</strong></em>：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&#x27;Lin&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(user, &#123;&#125;);</span><br></pre></td></tr></table></figure><p>并且这个<em><strong>代理对象</strong></em>可以监听到数据变化</p><p>在上面的例子中，我们有一个<em><strong>代理对象</strong></em>，但是当知道名称已经改变时，它并没有真正做任何事情。</p><p>为此，我们需要一个<em><strong>处理程序</strong></em>，它是一个对象，告诉<em><strong>代理对象</strong></em>在更新数据时应该做什么。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Handler that listens to data assignment operations</span></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">user, value, property</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;property&#125;</span> is being updated`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(user, value, property);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creating a proxy with the handler</span></span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&#x27;Lin&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(user, handler);</span><br></pre></td></tr></table></figure><p>现在，每当我们使用对代理对象更新<code>name</code>时，都会收到一条消息，并输出<code>name is being updated</code>。</p><p>如果你在想，这有什么了不起，我本来可以使用普通的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set"><em>setter</em></a>来做到这一点，我来告诉你其中的妙处：</p><ul><li>代理方法是通用的，并且可以重用。</li><li>在代理对象上设置的任何值都可以递归转换为代理。</li><li>现在你拥有了这个神奇的对象，它可以对数据更新做出反应，无论嵌套多深。</li></ul><p>除此之外，你还可以处理其他访问<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy#handler_functions">事件</a>，例如当属性被<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/get">读取</a>、<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set">更新</a>、<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/deleteProperty">删除</a>等等。</p><p>既然我们有能力监听操作，我们就需要以一种有意义的方式对它们作出反应。</p><h3 id="更新用户界面"><a href="#更新用户界面" class="headerlink" title="更新用户界面"></a>更新用户界面</h3><p>如果您还记得，第二部分的<em><strong>响应式</strong></em>是<em><strong>自动更新UI</strong></em>。为此，我们需要获取要更新的<em><strong>适当</strong></em>UI元素。但在此之前，我们需要首先标记一个<em><strong>适当</strong></em>的UI元素。</p><p>为此，我们将使用<a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes">data-attributes</a>，这个特性允许我们在元素上设置任意值。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Mark the h1 as appropriate for when &quot;name&quot; changes --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">data-mark</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>data-attributes</code>的精确性在于，我们现在可以使用以下方法找到所有<em><strong>适当</strong></em>的元素。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;[data-mark=&quot;name&quot;]&#x27;</span>);</span><br></pre></td></tr></table></figure><p>现在我们只需要设置所有适当元素的<code>innerText</code>:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">user, value, property</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> query = <span class="string">`[data-mark=&quot;<span class="subst">$&#123;property&#125;</span>&quot;]`</span>;</span><br><span class="line">    <span class="keyword">const</span> elements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(query);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> el <span class="keyword">of</span> elements) &#123;</span><br><span class="line">      el.<span class="property">innerText</span> = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(user, value, property);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Regular object is omitted cause it&#x27;s not needed.</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Lin&#x27;</span> &#125;, handler);</span><br></pre></td></tr></table></figure><p>就是这样，这就是<em><strong>响应式</strong></em>的关键！</p><p>由于我们处理程序的通用性质，对于用户的任何设置的属性，所有适当的用户界面元素都将被更新。</p><p>这就是 JavaScript 代理功能的强大之处，没有任何依赖项，并且经过一些巧妙的处理，它可以为我们提供这些神奇的响应式对象。</p><p>现在转向第二个主要内容…</p><h2 id="组合式（Composibility）"><a href="#组合式（Composibility）" class="headerlink" title="组合式（Composibility）"></a>组合式（Composibility）</h2><p>事实证明，浏览器已经有一个专门的功能，称为 <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components">Web Components</a>，谁知道呢！</p><p>很少有人使用它，因为使用起来有点麻烦（而且大多数人在开始项目时都会默认选择传统的框架，而不考虑项目的范围）。</p><p>要实现组件的可组合性，我们首先需要定义这些组件。</p><h3 id="使用模板和插槽（template-和-slot）来定义组件"><a href="#使用模板和插槽（template-和-slot）来定义组件" class="headerlink" title="使用模板和插槽（template 和 slot）来定义组件"></a>使用模板和插槽（template 和 slot）来定义组件</h3><p><code>&lt;template&gt;</code> 标签用于包含浏览器不会渲染的标记。例如，你可以在你的 HTML 中添加以下标记：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Will not render!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>它们不会被渲染。你可以将它们视为组件的隐形容器。</p><p>下一个构建块是 <code>&lt;slot&gt;</code> 元素，它定义了组件的内容将放置在哪里。这使得组件可以与不同的内容重复使用，即它变得具有可组合性。</p><p>例如，这是一个将其文本颜色设为红色的 <code>&lt;h1&gt;</code> 元素的示例。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在我们开始使用组件之前，就像上面的红色 <code>&lt;h1&gt;</code> 一样，我们需要<em><strong>注册</strong></em>它们。</p><h3 id="注册组件"><a href="#注册组件" class="headerlink" title="注册组件"></a>注册组件</h3><p>在注册红色 <code>&lt;h1&gt;</code> 组件之前，我们需要一个名称来注册它。我们可以使用 name 属性来实现：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;red-h1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在，使用一些 JavaScript 代码，我们可以获取组件及其名称：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;template&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> componentName = template.<span class="title function_">getAttribute</span>(<span class="string">&#x27;name&#x27;</span>);</span><br></pre></td></tr></table></figure><p>最后，使用 <code>customElements.define</code> 来注册它：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">customElements.<span class="title function_">define</span>(</span><br><span class="line">  componentName,</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">HTMLElement</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>();</span><br><span class="line">      <span class="keyword">const</span> component = template.<span class="property">content</span>.<span class="property">children</span>[<span class="number">0</span>].<span class="title function_">cloneNode</span>(<span class="literal">true</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span> &#125;).<span class="title function_">appendChild</span>(component);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上面的代码块中有很多内容：</p><ul><li>我们调用 <code>customElements.define</code> 方法，传递了两个参数。</li><li>第一个参数是组件的名称（例如 “red-h1”）。</li><li>第二个参数是一个类，它将我们的自定义组件定义为 <code>HTMLElement</code>。</li></ul><p>在类构造函数中，我们使用 <code>red-h1</code> 模板的副本来设置阴影 DOM 树。</p><ul><li><p>什么是 Shadow DOM?</p><p>阴影 DOM 是设置多个默认元素的样式的方式，例如范围输入（<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range">range input</a>）或视频元素（<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video">video element</a>）。</p><p>元素的阴影 DOM 默认是隐藏的，这就是为什么我们不能在开发工具控制台中看到它的原因，但在这里，我们将<code>mode</code>设置为 <code>&#39;open&#39;</code>。</p><p>这允许我们检查元素并看到红色的 <code>&lt;h1&gt;</code> 附加到了 <a href="https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot">#shadow-root</a>。</p></li></ul><p>调用 <code>customElements.define</code> 将允许我们像使用常规 HTML 元素一样使用定义的组件。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">red-h1</span>&gt;</span>This will render in red!<span class="tag">&lt;/<span class="name">red-h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在让我们把这两个概念结合起来吧！如果你有任何与这个主题相关的问题或需要进一步的解释，请随时提问。</p><h2 id="组合式-响应式"><a href="#组合式-响应式" class="headerlink" title="组合式+响应式"></a>组合式+响应式</h2><p>简单回顾一下，我们做了两件事:</p><ol><li>我们创建了一个响应式数据结构，即<em><strong>代理对象</strong></em>，当设置一个值时，它可以更新我们已经标记为<em><strong>适当</strong></em>的任何元素。</li><li>我们定义了一个自定义组件 <code>red-h1</code>，它会将其内容呈现为红色的 <code>&lt;h1&gt;</code>。</li></ol><p>现在我们可以将它们组合在一起了：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">red-h1</span> <span class="attr">data-mark</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">red-h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> user = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, handler);</span></span><br><span class="line"><span class="language-javascript">  user.<span class="property">name</span> = <span class="string">&#x27;Lin&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后，我们可以使用自定义组件来呈现我们的数据，并在更改数据时更新用户界面。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>当然，传统的前端框架不只是这样做，它们有专门的语法，例如Vue中的<a href="https://vuejs.org/guide/essentials/template-syntax.html">模板语法</a>和React中的<a href="https://react.dev/learn/writing-markup-with-jsx">JSX</a>，使得编写复杂的前端相对更加简洁。</p><p>由于这种专门的语法不是常规的 JavaScript 或 HTML，因此浏览器无法解析它们，所以它们都需要专门的工具将它们编译成常规的 JavaScript、HTML 和 CSS，然后浏览器才能理解它们。因此，<a href="https://fly.io/blog/js-ecosystem-delightfully-wierd#nobody-writes-javascript-any-more">很少有人再手动编写 JavaScript</a>。</p><p>即使没有专门的语法，只要使用 <code>Proxy</code> 和 <code>WebComponents</code>，你也可以做到与传统的前端框架类似的许多事情，而且代码同样简洁。</p><p>这里的代码过于简化，要将其转化为一个框架，你需要进一步完善。以下是我尝试做到这一点的示例，一个名为 <a href="https://18alan.space/strawberry">Strawberry</a> 的框架。</p><p>在开发这个框架时，我计划保持两个硬性约束：</p><ol><li>无依赖。</li><li>在使用之前不需要构建步骤。</li></ol><p>还有一个轻松的约束是保持代码库的精简。在撰写本文时，它只是一个不到 400 行代码的<a href="https://github.com/18alantom/strawberry/blob/52cc4e3c88924d112559d0547c533c1fafa61140/index.ts">单个文件</a>，让我们看看它会发展到哪里。</p>]]></content>
    
    
    <summary type="html">构建一个前端框架-响应式，组合式，零依赖</summary>
    
    
    
    <category term="Web" scheme="https://xbmlz.github.io/categories/Web/"/>
    
    
    <category term="Web" scheme="https://xbmlz.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>南京市民李先生</title>
    <link href="https://xbmlz.github.io/lizhi/"/>
    <id>https://xbmlz.github.io/lizhi/</id>
    <published>2022-08-22T10:20:48.000Z</published>
    <updated>2023-09-21T00:54:32.257Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="https://testingcf.jsdelivr.net/npm/aplayer/dist/APlayer.min.css" /><link rel="stylesheet" href="https://testingcf.jsdelivr.net/npm/driver.js/dist/driver.min.css" /><script src="https://testingcf.jsdelivr.net/npm/aplayer/dist/APlayer.min.js"></script><script src="https://testingcf.jsdelivr.net/gh/nj-lizhi/song@main/audio/list-v2.js"></script><script src="https://testingcf.jsdelivr.net/npm/hls.js@0.14.4/dist/hls.min.js"></script><script src="https://testingcf.jsdelivr.net/npm/dplayer@1.27.0/dist/DPlayer.min.js"></script><script src="https://testingcf.jsdelivr.net/npm/driver.js/dist/driver.min.js"></script><h2 id="音乐合集"><a href="#音乐合集" class="headerlink" title="音乐合集"></a>音乐合集</h2><div id="aplayer"></div><script>// https://api.i-meto.com/meting/api?server=netease&type=playlist&id=3778678const ap = new APlayer({    container: document.getElementById('aplayer'),    autoplay: false,    listFolded: false,    audio: list});</script><h2 id="2009-我爱南京跨年演唱会"><a href="#2009-我爱南京跨年演唱会" class="headerlink" title="2009-我爱南京跨年演唱会"></a>2009-我爱南京跨年演唱会</h2><div id="dplayer1"></div><script>// https://api.i-meto.com/meting/api?server=netease&type=playlist&id=3778678const dp1 = new DPlayer({    container: document.getElementById("dplayer1"),    video: {        url: "https://testingcf.jsdelivr.net/gh/nj-lizhi/kn-2009-wanj@main/video/roadmap.js",        type: "hls",    },});</script><h2 id="2014-IO-跨年演唱会"><a href="#2014-IO-跨年演唱会" class="headerlink" title="2014-IO 跨年演唱会"></a>2014-IO 跨年演唱会</h2><div id="dplayer2"></div><script>// https://api.i-meto.com/meting/api?server=netease&type=playlist&id=3778678const dp2 = new DPlayer({    container: document.getElementById("dplayer2"),    video: {        url: "https://testingcf.jsdelivr.net/gh/nj-lizhi/kn-2014-io@main/video/roadmap.js",        type: "hls",    },});</script><h2 id="2015-看见北京站直播实录"><a href="#2015-看见北京站直播实录" class="headerlink" title="2015-看见北京站直播实录"></a>2015-看见北京站直播实录</h2><div id="dplayer3"></div><script>// https://api.i-meto.com/meting/api?server=netease&type=playlist&id=3778678const dp3 = new DPlayer({    container: document.getElementById("dplayer3"),    video: {        url: "https://testingcf.jsdelivr.net/gh/nj-lizhi/kn-2015-kj@main/video/roadmap.js",        type: "hls",    },});</script><h2 id="2018-洗心革面跨年演唱会"><a href="#2018-洗心革面跨年演唱会" class="headerlink" title="2018-洗心革面跨年演唱会"></a>2018-洗心革面跨年演唱会</h2><div id="dplayer4"></div><script>// https://api.i-meto.com/meting/api?server=netease&type=playlist&id=3778678const dp4 = new DPlayer({    container: document.getElementById("dplayer4"),    video: {        url: "https://testingcf.jsdelivr.net/gh/nj-lizhi/kn-2018-xxgm@main/video/roadmap.js",        type: "hls",    },});</script>]]></content>
    
    
    <summary type="html">南京市民李先生私藏</summary>
    
    
    
    <category term="Music" scheme="https://xbmlz.github.io/categories/Music/"/>
    
    
    <category term="Music" scheme="https://xbmlz.github.io/tags/Music/"/>
    
  </entry>
  
  <entry>
    <title>Echarts Test</title>
    <link href="https://xbmlz.github.io/echarts-test/"/>
    <id>https://xbmlz.github.io/echarts-test/</id>
    <published>2022-07-25T14:00:50.000Z</published>
    <updated>2023-09-21T00:54:32.257Z</updated>
    
    <content type="html"><![CDATA[<h2 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h2>  <div id="echarts-2364" style="width: 85%; height: 400px; margin: 0 auto"></div>  <script src="https://cdn.jsdelivr.net/npm/echarts@5.3.3/dist/echarts.min.js"></script>  <script>    var myChart = echarts.init(document.getElementById('echarts-2364'));    var option = {  xAxis: {    type: 'category',    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']  },  yAxis: {    type: 'value'  },  series: [    {      data: [150, 230, 224, 218, 135, 147, 260],      type: 'line'    }  ]};    myChart.setOption(option);  </script>  <h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2>  <div id="echarts-2685" style="width: 85%; height: 400px; margin: 0 auto"></div>  <script src="https://cdn.jsdelivr.net/npm/echarts@5.3.3/dist/echarts.min.js"></script>  <script>    var myChart = echarts.init(document.getElementById('echarts-2685'));    var option = {  xAxis: {    type: 'category',    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']  },  yAxis: {    type: 'value'  },  series: [    {      data: [120, 200, 150, 80, 70, 110, 130],      type: 'bar',      showBackground: true,      backgroundStyle: {        color: 'rgba(180, 180, 180, 0.2)'      }    }  ]};    myChart.setOption(option);  </script>  <h2 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h2>  <div id="echarts-7230" style="width: 85%; height: 400px; margin: 0 auto"></div>  <script src="https://cdn.jsdelivr.net/npm/echarts@5.3.3/dist/echarts.min.js"></script>  <script>    var myChart = echarts.init(document.getElementById('echarts-7230'));    var option = {  title: {    text: 'Referer of a Website',    subtext: 'Fake Data',    left: 'center'  },  tooltip: {    trigger: 'item'  },  legend: {    orient: 'vertical',    left: 'left'  },  series: [    {      name: 'Access From',      type: 'pie',      radius: '50%',      data: [        { value: 1048, name: 'Search Engine' },        { value: 735, name: 'Direct' },        { value: 580, name: 'Email' },        { value: 484, name: 'Union Ads' },        { value: 300, name: 'Video Ads' }      ],      emphasis: {        itemStyle: {          shadowBlur: 10,          shadowOffsetX: 0,          shadowColor: 'rgba(0, 0, 0, 0.5)'        }      }    }  ]};    myChart.setOption(option);  </script>  <h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2>  <div id="echarts-302" style="width: 85%; height: 400px; margin: 0 auto"></div>  <script src="https://cdn.jsdelivr.net/npm/echarts@5.3.3/dist/echarts.min.js"></script>  <script>    var myChart = echarts.init(document.getElementById('echarts-302'));    var option = {  xAxis: {},  yAxis: {},  series: [    {      symbolSize: 20,      data: [        [10.0, 8.04],        [8.07, 6.95],        [13.0, 7.58],        [9.05, 8.81],        [11.0, 8.33],        [14.0, 7.66],        [13.4, 6.81],        [10.0, 6.33],        [14.0, 8.96],        [12.5, 6.82],        [9.15, 7.2],        [11.5, 7.2],        [3.03, 4.23],        [12.2, 7.83],        [2.02, 4.47],        [1.05, 3.33],        [4.05, 4.96],        [6.03, 7.24],        [12.0, 6.26],        [12.0, 8.84],        [7.08, 5.82],        [5.02, 5.68]      ],      type: 'scatter'    }  ]};    myChart.setOption(option);  </script>  <h2 id="雷达图"><a href="#雷达图" class="headerlink" title="雷达图"></a>雷达图</h2>  <div id="echarts-1672" style="width: 85%; height: 400px; margin: 0 auto"></div>  <script src="https://cdn.jsdelivr.net/npm/echarts@5.3.3/dist/echarts.min.js"></script>  <script>    var myChart = echarts.init(document.getElementById('echarts-1672'));    var option = {  title: {    text: 'Basic Radar Chart'  },  legend: {    data: ['Allocated Budget', 'Actual Spending']  },  radar: {    // shape: 'circle',    indicator: [      { name: 'Sales', max: 6500 },      { name: 'Administration', max: 16000 },      { name: 'Information Technology', max: 30000 },      { name: 'Customer Support', max: 38000 },      { name: 'Development', max: 52000 },      { name: 'Marketing', max: 25000 }    ]  },  series: [    {      name: 'Budget vs spending',      type: 'radar',      data: [        {          value: [4200, 3000, 20000, 35000, 50000, 18000],          name: 'Allocated Budget'        },        {          value: [5000, 14000, 28000, 26000, 42000, 21000],          name: 'Actual Spending'        }      ]    }  ]};    myChart.setOption(option);  </script>  <h2 id="盒须图"><a href="#盒须图" class="headerlink" title="盒须图"></a>盒须图</h2>  <div id="echarts-2064" style="width: 85%; height: 400px; margin: 0 auto"></div>  <script src="https://cdn.jsdelivr.net/npm/echarts@5.3.3/dist/echarts.min.js"></script>  <script>    var myChart = echarts.init(document.getElementById('echarts-2064'));    var option = {  title: [    {      text: 'Michelson-Morley Experiment',      left: 'center'    },    {      text: 'upper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR',      borderColor: '#999',      borderWidth: 1,      textStyle: {        fontWeight: 'normal',        fontSize: 14,        lineHeight: 20      },      left: '10%',      top: '90%'    }  ],  dataset: [    {      // prettier-ignore      source: [                [850, 740, 900, 1070, 930, 850, 950, 980, 980, 880, 1000, 980, 930, 650, 760, 810, 1000, 1000, 960, 960],                [960, 940, 960, 940, 880, 800, 850, 880, 900, 840, 830, 790, 810, 880, 880, 830, 800, 790, 760, 800],                [880, 880, 880, 860, 720, 720, 620, 860, 970, 950, 880, 910, 850, 870, 840, 840, 850, 840, 840, 840],                [890, 810, 810, 820, 800, 770, 760, 740, 750, 760, 910, 920, 890, 860, 880, 720, 840, 850, 850, 780],                [890, 840, 780, 810, 760, 810, 790, 810, 820, 850, 870, 870, 810, 740, 810, 940, 950, 800, 810, 870]            ]    },    {      transform: {        type: 'boxplot',        config: { itemNameFormatter: 'expr {value}' }      }    },    {      fromDatasetIndex: 1,      fromTransformResult: 1    }  ],  tooltip: {    trigger: 'item',    axisPointer: {      type: 'shadow'    }  },  grid: {    left: '10%',    right: '10%',    bottom: '15%'  },  xAxis: {    type: 'category',    boundaryGap: true,    nameGap: 30,    splitArea: {      show: false    },    splitLine: {      show: false    }  },  yAxis: {    type: 'value',    name: 'km/s minus 299,000',    splitArea: {      show: true    }  },  series: [    {      name: 'boxplot',      type: 'boxplot',      datasetIndex: 1    },    {      name: 'outlier',      type: 'scatter',      datasetIndex: 2    }  ]};    myChart.setOption(option);  </script>  ]]></content>
    
    
    <summary type="html">测试Echarts语法</summary>
    
    
    
    <category term="Test" scheme="https://xbmlz.github.io/categories/Test/"/>
    
    
    <category term="Test" scheme="https://xbmlz.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>MathJax Test</title>
    <link href="https://xbmlz.github.io/math-jax-test/"/>
    <id>https://xbmlz.github.io/math-jax-test/</id>
    <published>2022-07-21T08:53:56.000Z</published>
    <updated>2023-09-21T00:54:32.257Z</updated>
    
    <content type="html"><![CDATA[<h2 id="行内公式与块公式"><a href="#行内公式与块公式" class="headerlink" title="行内公式与块公式"></a>行内公式与块公式</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$f(x)=ax+b$ 这是行内公式.</span><br><span class="line">$$f(x)=ax+b$$ 这是块公式，单独占一行.</span><br></pre></td></tr></table></figure><p>$f(x)&#x3D;ax+b$ 这是行内公式.<br>$$f(x)&#x3D;ax+b$$ 这是块公式，单独占一行.</p><h2 id="上标与下标"><a href="#上标与下标" class="headerlink" title="上标与下标"></a>上标与下标</h2><p>使用 ^ 表示上标，使用 _ 表示下标，如果上下标的内容多于一个字符，可以使用大括号括起来：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$$f(x) = a<span class="emphasis">_1x^n + a_</span>2x^&#123;n-1&#125; + a<span class="emphasis">_3x^&#123;n-2&#125;$$</span></span><br></pre></td></tr></table></figure><p>显示效果：</p><p>$$f(x) &#x3D; a_1x^n + a_2x^{n-1} + a_3x^{n-2}$$</p><p>如果左右两边都有上下标可以使用 \sideset 语法：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$$\sideset&#123;^n<span class="emphasis">_k&#125;&#123;^x_</span>y&#125;a$$</span><br></pre></td></tr></table></figure><p>显示效果：</p><p>$$\sideset{^n_k}{^x_y}a$$</p><h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><p>在 markdown 语法中，, $, {, }, _都是有特殊含义的，所以需要加\转义。小括号与方括号可以使用原始的() [] 大括号需要转义\也可以使用\lbrace和 \rbrace</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$$ \\&#123;x<span class="emphasis">*y\\&#125; $$  --注：大括号在markdown中已有一次转义，在mathjax中还要再转一次，所以为两个斜杠</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">$$\lbrace x*</span>y \rbrace$$</span><br></pre></td></tr></table></figure><p>显示效果：</p><p>$$ \{x*y\} $$</p><p>$$\lbrace x*y \rbrace$$</p><p>原始符号不会随着公式大小自动缩放，需要使用 \left 和 \right 来实现自动缩放：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$$\left \lbrace \sum<span class="emphasis">_&#123;i=0&#125;^n i^3 = \frac&#123;(n^2+n)(n+6)&#125;&#123;9&#125; \right \rbrace$$</span></span><br></pre></td></tr></table></figure><p>显示效果：</p><p>$$\left \lbrace \sum_{i&#x3D;0}^n i^3 &#x3D; \frac{(n^2+n)(n+6)}{9} \right \rbrace$$</p><p>不使用\left 和 \right的效果：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$$ \lbrace \sum<span class="emphasis">_&#123;i=0&#125;^n i^3 = \frac&#123;(n^2+n)(n+6)&#125;&#123;9&#125;  \rbrace$$</span></span><br></pre></td></tr></table></figure><p>显示效果：</p><p>$$ \lbrace \sum_{i&#x3D;0}^n i^3 &#x3D; \frac{(n^2+n)(n+6)}{9}  \rbrace$$</p><h2 id="分数与开方"><a href="#分数与开方" class="headerlink" title="分数与开方"></a>分数与开方</h2><p>可以使用\frac 或者 \over 实现分数的显示：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$\frac xy$</span><br><span class="line">$ x+3 \over y+5 $</span><br></pre></td></tr></table></figure><p>显示为 $\frac xy$ 和 $ x+3 \over y+5 $</p><p>开方使用\sqrt:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$ \sqrt&#123;x^5&#125; $</span><br><span class="line">$ \sqrt[3]&#123;\frac xy&#125; $</span><br></pre></td></tr></table></figure><p>显示为 $ \sqrt{x^5} $ 和 $ \sqrt[3]{\frac xy} $</p><h2 id="求和与积分"><a href="#求和与积分" class="headerlink" title="求和与积分"></a>求和与积分</h2><p>求和使用\sum,可加上下标，积分使用\int可加上下限，双重积分用\iint</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$ \sum<span class="emphasis">_&#123;i=0&#125;^n $</span></span><br><span class="line"><span class="emphasis">$ \int_</span>1^\infty $</span><br><span class="line">$ \iint<span class="emphasis">_1^\infty $</span></span><br></pre></td></tr></table></figure><p>显示为 $ \sum_{i&#x3D;0}^n $ 和 $ \int_1^\infty $ 以及 $ \iint_1^\infty $</p><h2 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h2><p>极限使用\lim:</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$ \lim<span class="emphasis">_&#123;x \to 0&#125; $</span></span><br></pre></td></tr></table></figure><p>显示为: $ \lim_{x \to 0} $</p><h2 id="表格与矩阵"><a href="#表格与矩阵" class="headerlink" title="表格与矩阵"></a>表格与矩阵</h2><p>表格样式lcr表示居中，|加入一条竖线，\hline表示行间横线，列之间用&amp;分隔，行之间用\分隔：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$$\begin&#123;array&#125;&#123;c|lcr&#125;</span><br><span class="line">n &amp; \text&#123;Left&#125; &amp; \text&#123;Center&#125; &amp; \text&#123;Right&#125; \\\\</span><br><span class="line">\hline</span><br><span class="line">1 &amp; 1.97 &amp; 5 &amp; 12 \\\\</span><br><span class="line">2 &amp; -11 &amp; 19 &amp; -80 \\\\</span><br><span class="line">3 &amp; 70 &amp; 209 &amp; 1+i \\\\</span><br><span class="line">\end&#123;array&#125;$$</span><br></pre></td></tr></table></figure><p>显示效果：</p><p>$$\begin{array}{c|lcr}<br>n &amp; \text{Left} &amp; \text{Center} &amp; \text{Right} \\<br>\hline<br>1 &amp; 1.97 &amp; 5 &amp; 12 \\<br>2 &amp; -11 &amp; 19 &amp; -80 \\<br>3 &amp; 70 &amp; 209 &amp; 1+i \\<br>\end{array}$$</p><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$$\left[</span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line">V<span class="emphasis">_A \\\\</span></span><br><span class="line"><span class="emphasis">V_</span>B \\\\</span><br><span class="line">V<span class="emphasis">_C \\\\</span></span><br><span class="line"><span class="emphasis">\end&#123;matrix&#125;</span></span><br><span class="line"><span class="emphasis">\right] =</span></span><br><span class="line"><span class="emphasis">\left[</span></span><br><span class="line"><span class="emphasis">\begin&#123;matrix&#125;</span></span><br><span class="line"><span class="emphasis">1 &amp; 0 &amp; L \\\\</span></span><br><span class="line"><span class="emphasis">-cosψ &amp; sinψ &amp; L \\\\</span></span><br><span class="line"><span class="emphasis">-cosψ &amp; -sinψ &amp; L</span></span><br><span class="line"><span class="emphasis">\end&#123;matrix&#125;</span></span><br><span class="line"><span class="emphasis">\right]</span></span><br><span class="line"><span class="emphasis">\left[</span></span><br><span class="line"><span class="emphasis">\begin&#123;matrix&#125;</span></span><br><span class="line"><span class="emphasis">V_</span>x \\\\</span><br><span class="line">V<span class="emphasis">_y \\\\</span></span><br><span class="line"><span class="emphasis">W \\\\</span></span><br><span class="line"><span class="emphasis">\end&#123;matrix&#125;</span></span><br><span class="line"><span class="emphasis">\right] $$</span></span><br></pre></td></tr></table></figure><p>显示效果:</p><p>$$\left[<br>\begin{matrix}<br>V_A \\<br>V_B \\<br>V_C \\<br>\end{matrix}<br>\right] &#x3D;<br>\left[<br>\begin{matrix}<br>1 &amp; 0 &amp; L \\<br>-cosψ &amp; sinψ &amp; L \\<br>-cosψ &amp; -sinψ &amp; L<br>\end{matrix}<br>\right]<br>\left[<br>\begin{matrix}<br>V_x \\<br>V_y \\<br>W \\<br>\end{matrix}<br>\right] $$</p><hr><p>综合测试：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$$\frac&#123;\partial u&#125;&#123;\partial t&#125;</span><br><span class="line">= h^2 \left( \frac&#123;\partial^2 u&#125;&#123;\partial x^2&#125; +</span><br><span class="line">\frac&#123;\partial^2 u&#125;&#123;\partial y^2&#125; +</span><br><span class="line">\frac&#123;\partial^2 u&#125;&#123;\partial z^2&#125;\right)$$</span><br><span class="line"></span><br><span class="line">$$ \lbrace \sum<span class="emphasis">_&#123;i=0&#125;^n i^3 = \frac&#123;(n^2+n)(n+6)&#125;&#123;9&#125;  \rbrace$$</span></span><br></pre></td></tr></table></figure><p>显示效果:</p><p>$$\frac{\partial u}{\partial t}<br>&#x3D; h^2 \left( \frac{\partial^2 u}{\partial x^2} +<br>\frac{\partial^2 u}{\partial y^2} +<br>\frac{\partial^2 u}{\partial z^2}\right)$$</p><p>$$ \lbrace \sum_{i&#x3D;0}^n i^3 &#x3D; \frac{(n^2+n)(n+6)}{9}  \rbrace$$</p>]]></content>
    
    
    <summary type="html">测试MathJax语法</summary>
    
    
    
    <category term="Test" scheme="https://xbmlz.github.io/categories/Test/"/>
    
    
    <category term="Test" scheme="https://xbmlz.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>Markdown Test</title>
    <link href="https://xbmlz.github.io/markdown-test/"/>
    <id>https://xbmlz.github.io/markdown-test/</id>
    <published>2022-07-20T14:23:37.000Z</published>
    <updated>2023-09-21T00:54:32.257Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>不同数量的<code>#</code>可以完成不同的标题，如下：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>粗体、斜体、粗体和斜体，删除线，需要在文字前后加不同的标记符号。如下：</p><p><strong>这个是粗体</strong></p><p><em>这个是斜体</em></p><p><em><strong>这个是粗体加斜体</strong></em></p><p><del>这里想用删除线</del></p><p>注：如果想给字体换颜色、字体或者居中显示，需要使用内嵌HTML来实现。</p><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>无序列表的使用，在符号<code>-</code>后加空格使用。如下：</p><ul><li>无序列表 1</li><li>无序列表 2</li><li>无序列表 3</li></ul><p>如果要控制列表的层级，则需要在符号<code>-</code>前使用空格。如下：</p><ul><li>无序列表 1</li><li>无序列表 2<ul><li>无序列表 2.1</li><li>无序列表 2.2<ul><li>无序列表 2.1.1</li><li>无序列表 2.1.2</li></ul></li></ul></li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>有序列表的使用，在数字及符号<code>.</code>后加空格后输入内容，如下：</p><ol><li>有序列表 1</li><li>有序列表 2</li><li>有序列表 3</li></ol><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>引用的格式是在符号<code>&gt;</code>后面书写文字。如下：</p><blockquote><p>读一本好书，就是在和高尚的人谈话。 ——歌德</p></blockquote><blockquote><p>雇用制度对工人不利，但工人根本无力摆脱这个制度。 ——阮一峰</p></blockquote><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>微信公众号仅支持公众号文章链接，即域名为<code>https://mp.weixin.qq.com/</code>的合法链接。使用方法如下所示：</p><p>对于该论述，欢迎读者查阅之前发过的文章，<a href="https://mp.weixin.qq.com/s/s5IhxV2ooX3JN_X416nidA">你是《未来世界的幸存者》么？</a><br><a id="jump_8"></a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>插入图片，格式如下：</p><p><img src="https://www.nginx.cn/wp-content/uploads/2020/03/qrcode_for_gh_82cf87d482f0_258.jpg" alt="这里写图片描述"></p><p>支持 jpg、png、gif、svg 等图片格式，<strong>其中 svg 文件仅可在微信公众平台中使用</strong>，svg 文件示例如下：</p><p><img src="https://markdown.com.cn/images/i-am-svg.svg"></p><p>支持图片<strong>拖拽和截图粘贴</strong>到编辑器中。</p><p>注：支持图片 <em><strong>拖拽和截图粘贴</strong></em> 到编辑器中，仅支持 https 的图片，图片粘贴到微信时会自动上传微信服务器。</p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>可以在一行中用三个以上的减号来建立一个分隔线，同时需要在分隔线的上面空一行。如下：</p><hr><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>可以使用冒号来定义表格的对齐方式，如下：</p><table><thead><tr><th align="left">姓名</th><th align="center">年龄</th><th align="right">工作</th></tr></thead><tbody><tr><td align="left">小可爱</td><td align="center">18</td><td align="right">吃可爱多</td></tr><tr><td align="left">小小勇敢</td><td align="center">20</td><td align="right">爬棵勇敢树</td></tr><tr><td align="left">小小小机智</td><td align="center">22</td><td align="right">看一本机智书</td></tr></tbody></table><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><blockquote><p>支持平台：微信代码主题仅支持微信公众号！其他主题无限制。</p></blockquote><p>如果在一个行内需要引用代码，只要用反引号引起来就好，如下：</p><p>Use the <code>printf()</code> function.</p><p>在需要高亮的代码块的前一行及后一行使用三个反引号，同时<strong>第一行反引号后面表示代码块所使用的语言</strong>，如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// FileName: HelloWorld.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">  <span class="comment">// Java 入口程序，程序从此入口</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello,World!&quot;</span>); <span class="comment">// 向控制台打印一条语句</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">测试markdown语法</summary>
    
    
    
    <category term="Test" scheme="https://xbmlz.github.io/categories/Test/"/>
    
    
    <category term="Test" scheme="https://xbmlz.github.io/tags/Test/"/>
    
  </entry>
  
</feed>
